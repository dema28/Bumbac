package com.bumbac.modules.cart.entity;

import com.bumbac.modules.catalog.entity.Yarn;
import com.bumbac.shared.entity.BaseEntity;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.persistence.*;
import jakarta.validation.constraints.DecimalMin;
import jakarta.validation.constraints.Min;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "colors", indexes = {
        @Index(name = "idx_color_yarn_id", columnList = "yarn_id"),
        @Index(name = "idx_color_code", columnList = "color_code"),
        @Index(name = "idx_color_sku", columnList = "sku"),
        @Index(name = "idx_colors_color_name", columnList = "color_name"),
        @Index(name = "idx_colors_hex_value", columnList = "hex_value")
})
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Builder
@EqualsAndHashCode(callSuper = true)
@Schema(description = "–¶–≤–µ—Ç/–≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞")
public class Color extends BaseEntity {

    @Column(name = "id") // üîÅ –Ø–≤–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ë–î
    private Long id;

    @Column(name = "created_at", updatable = false)
    private LocalDateTime createdAt;

    @Column(name = "updated_at")
    private LocalDateTime updatedAt;

    @Column(name = "color_code", nullable = false, length = 20)
    @NotBlank(message = "–ö–æ–¥ —Ü–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    @Schema(description = "–ö–æ–¥ —Ü–≤–µ—Ç–∞", example = "RED001", requiredMode = Schema.RequiredMode.REQUIRED, maxLength = 20)
    private String colorCode;

    @Column(name = "color_name", nullable = false, length = 100)
    @NotBlank(message = "–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    @Schema(description = "–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞", example = "–ö—Ä–∞—Å–Ω—ã–π", requiredMode = Schema.RequiredMode.REQUIRED, maxLength = 100)
    private String colorName;

    @Column(name = "sku", unique = true, nullable = false, length = 50)
    @NotBlank(message = "SKU –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
    @Schema(description = "–ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞", example = "YARN-RED-001", requiredMode = Schema.RequiredMode.REQUIRED, maxLength = 50)
    private String sku;

    @Column(name = "barcode", length = 100)
    @Schema(description = "–®—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞", example = "1234567890123", maxLength = 100)
    private String barcode;

    @Column(name = "hex_value", length = 7)
    @Schema(description = "–¶–≤–µ—Ç –≤ HEX —Ñ–æ—Ä–º–∞—Ç–µ", example = "#FF0000", pattern = "^#[0-9A-Fa-f]{6}$", maxLength = 7)
    private String hexValue;

    @Column(name = "stock_quantity", nullable = false)
    @NotNull(message = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ")
    @Min(value = 0, message = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
    @Schema(description = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ", example = "10", minimum = "0", requiredMode = Schema.RequiredMode.REQUIRED)
    private Integer stockQuantity;

    @Column(name = "price", nullable = false, precision = 10, scale = 2)
    @NotNull(message = "–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
    @DecimalMin(value = "0.0", inclusive = false, message = "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    @Schema(description = "–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞", example = "25.99", requiredMode = Schema.RequiredMode.REQUIRED)
    private BigDecimal price;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "yarn_id", nullable = false)
    @NotNull(message = "–ü—Ä—è–∂–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
    @Schema(description = "–ü—Ä—è–∂–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–æ—Ç —Ü–≤–µ—Ç", hidden = true)
    private Yarn yarn;

    @PrePersist
    public void onCreate() {
        if (createdAt == null) createdAt = LocalDateTime.now();
        if (updatedAt == null) updatedAt = LocalDateTime.now();
    }

    @PreUpdate
    public void onUpdate() {
        updatedAt = LocalDateTime.now();
    }
}