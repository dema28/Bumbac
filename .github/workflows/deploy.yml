name: 🚀 CI/CD Pipeline - Tests & Deploy

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # ============================================
  # 📦 УСТАНОВКА ЗАВИСИМОСТЕЙ
  # ============================================
  install-backend:
    name: ☕ Install Backend Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: 📦 Download Maven Dependencies
        working-directory: ./backend
        run: mvn dependency:go-offline -q

  # ============================================
  # ☕ BACKEND TESTS - JAVA + MAVEN
  # ============================================
  backend-tests:
    name: ☕ Backend Tests (Java + Maven)
    needs: install-backend
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: 🗄️ Setup MySQL Test Database
        run: |
          sudo systemctl start mysql.service
          mysql -e 'CREATE DATABASE IF NOT EXISTS yarn_store_test;' -uroot -proot

      - name: 🧪 Run Backend Tests (TestNG)
        working-directory: ./backend
        run: mvn test -Dspring.profiles.active=test
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: yarn_store_test
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: 📊 Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/target/surefire-reports/

  # ============================================
  # ☕ QA AUTOMATION TESTS - JAVA
  # ============================================
  qa-automation-java:
    name: ☕ QA Automation Tests (Java)
    runs-on: ubuntu-latest
    needs: [backend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: 🌐 Setup Chrome for Selenium
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: 📦 Install ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: 🧪 Run Java QA Automation Tests
        working-directory: ./qa-automation
        run: |
          echo "☕ Running Java QA automation tests..."
          # Если у вас есть отдельная папка с Java автотестами
          if [ -f "pom.xml" ]; then
            mvn clean test -Dtest.env=ci -Dwebdriver.chrome.driver=/usr/local/bin/chromedriver
          else
            echo "⚠️ No Java QA automation project found"
            echo "📁 Expected structure: qa-automation/pom.xml"
            echo "📝 Create Maven project for Java autotests"
          fi

      - name: 📊 Generate Allure Report (Java)
        if: always()
        working-directory: ./qa-automation
        run: |
          if [ -d "target/allure-results" ]; then
            echo "📊 Generating Allure report..."
            # Можно добавить Allure CLI для генерации HTML отчетов
          fi

      - name: 📊 Upload Java QA Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: java-qa-reports
          path: |
            qa-automation/target/surefire-reports/
            qa-automation/target/allure-results/
            qa-automation/screenshots/

  # ============================================
  # 🚀 BUILD & DEPLOY
  # ============================================
  build-and-deploy:
    name: 🚀 Build & Deploy to Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: ☕ Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      # Backend Build
      - name: ☕ Build Backend JAR
        working-directory: ./backend
        run: mvn clean package -DskipTests

      # Deploy via SSH
      - name: 🚀 Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "🚀 Starting deployment..."
            cd /home/denis/scripts
            chmod +x auto-deploy.sh
            ./auto-deploy.sh
            echo "✅ Deployment completed!"

  # ============================================
  # 📧 NOTIFICATIONS
  # ============================================
  notify:
    name: 📧 Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    steps:
      - name: 📧 Notify Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          echo "🔗 Application deployed to production"

      - name: ❌ Notify Failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          echo "🔍 Check logs for details"
