name: CI/CD Pipeline - Tests & Deploy

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  # ============================================
  #  –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô
  # ============================================
  install-frontend:
    name: Install Frontend Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache node_modules
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name:  Install Dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

  install-backend:
    name: Install Backend Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Download Maven Dependencies
        working-directory: ./backend
        run: mvn dependency:go-offline -q

  # ============================================
  # üîç QUALITY CHECKS - FRONTEND
  # ============================================
  frontend-quality:
    name: Frontend Quality Checks
    needs: install-frontend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check: [eslint, typecheck, test]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Restore node_modules Cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Prepare Nuxt
        run: npx nuxi prepare

      - name: Run ESLint
        if: matrix.check == 'eslint'
        run: npm run lint

      - name: Run TypeCheck
        if: matrix.check == 'typecheck'
        run: npm run typecheck

      - name: Run Frontend Tests
        if: matrix.check == 'test'
        run: npm run test

  # ============================================
  #  BACKEND TESTS - JAVA + MAVEN
  # ============================================
  backend-tests:
    name: Backend Tests (Java + Maven)
    needs: install-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: etup MySQL Test Database
        run: |
          sudo systemctl start mysql.service
          mysql -e 'CREATE DATABASE IF NOT EXISTS yarn_store_test;' -uroot -proot

      - name: Run Backend Tests (TestNG)
        working-directory: ./backend
        run: mvn test -Dspring.profiles.active=test
        env:
          DB_HOST: localhost
          DB_PORT: 3306
          DB_NAME: yarn_store_test
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-reports
          path: backend/target/surefire-reports/

  # ============================================
  #  QA AUTOMATION TESTS - JAVA
  # ============================================
  qa-automation-java:
    name: QA Automation Tests (Java)
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      - name: Setup Chrome for Selenium
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      - name: Install ChromeDriver
        uses: nanasess/setup-chromedriver@v2

      - name: Run Java QA Automation Tests
        working-directory: ./qa-automation
        run: |
          echo "Running Java QA automation tests..."
          # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ —Å Java –∞–≤—Ç–æ—Ç–µ—Å—Ç–∞–º–∏
          if [ -f "pom.xml" ]; then
            mvn clean test -Dtest.env=ci -Dwebdriver.chrome.driver=/usr/local/bin/chromedriver
          else
            echo "no Java QA automation project found"
            echo "Expected structure: qa-automation/pom.xml"
            echo "Create Maven project for Java autotests"
          fi

      - name: Generate Allure Report (Java)
        if: always()
        working-directory: ./qa-automation
        run: |
          if [ -d "target/allure-results" ]; then
            echo "Generating Allure report..."
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Allure CLI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HTML –æ—Ç—á–µ—Ç–æ–≤
          fi

      - name: Upload Java QA Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: java-qa-reports
          path: |
            qa-automation/target/surefire-reports/
            qa-automation/target/allure-results/
            qa-automation/screenshots/

  # ============================================
  #  BUILD & DEPLOY
  # ============================================
  build-and-deploy:
    name: Build & Deploy to Production
    runs-on: ubuntu-latest
    needs: [frontend-quality, backend-tests, qa-automation-java]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: maven

      # Frontend Build
      - name: uild Frontend
        run: |
          npm ci
          npm run build

      # Backend Build
      - name: Build Backend JAR
        working-directory: ./backend
        run: mvn clean package -DskipTests

      # Deploy via SSH
      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            echo "Starting deployment..."
            cd /home/denis/scripts
            chmod +x auto-deploy.sh
            ./auto-deploy.sh
            echo "Deployment completed!"

  # ============================================
  #  NOTIFICATIONS
  # ============================================
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    steps:
      - name: Notify Success
        if: needs.build-and-deploy.result == 'success'
        run: |
          echo "Deployment successful!"
          echo "Application deployed to production"

      - name: Notify Failure
        if: needs.build-and-deploy.result == 'failure'
        run: |
          echo "Deployment failed!"
          echo "Check logs for details"
