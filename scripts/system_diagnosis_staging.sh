#!/bin/bash

# –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ STAGING —Å–∏—Å—Ç–µ–º—ã Bumbac.md
# –ê–≤—Ç–æ—Ä: Denis + GPT

echo "üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê STAGING BUMBAC.MD"
echo "========================================"
echo "–î–∞—Ç–∞: $(date)"
echo "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $(whoami)"
echo "–•–æ—Å—Ç: $(hostname)"
echo ""

print_header() {
    echo ""
    echo "üìä $1"
    echo "----------------------------------------"
}

# 1. –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
print_header "–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï"
echo "OS: $(grep PRETTY_NAME /etc/os-release | cut -d'\"' -f2)"
echo "Kernel: $(uname -r)"
echo "Uptime: $(uptime -p)"
echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
echo "CPU: $(nproc) cores"
echo "Memory: $(free -h | awk '/Mem/ {print $2}')"
echo "Disk: $(df -h / | awk '$6=="/"{print $2 " total, " $3 " used, " $4 " free"}')"

# 2. SCREEN –°–ï–°–°–ò–ò
print_header "SCREEN –°–ï–°–°–ò–ò"
screen -ls 2>/dev/null
if screen -ls | grep -q "backend-staging"; then
    echo "‚úÖ Backend STAGING screen –∞–∫—Ç–∏–≤–Ω–∞"
else
    echo "‚ùå Backend STAGING screen –ù–ï –Ω–∞–π–¥–µ–Ω–∞"
fi
if screen -ls | grep -q "frontend-staging"; then
    echo "‚úÖ Frontend STAGING screen –∞–∫—Ç–∏–≤–Ω–∞"
else
    echo "‚ùå Frontend STAGING screen –ù–ï –Ω–∞–π–¥–µ–Ω–∞"
fi

# 3. –°–ï–¢–ï–í–´–ï –ü–û–†–¢–´
print_header "–°–ï–¢–ï–í–´–ï –ü–û–†–¢–´"
ss -ltnp | grep -E ":8082|:3002|:3306|:8081|:1025|:8025" || echo "‚ùå –ù–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–∞ staging-–ø–æ—Ä—Ç–∞—Ö"

# 4. –ü–†–û–¶–ï–°–°–´
print_header "–ü–†–û–¶–ï–°–°–´"

echo "Java (Backend STAGING):"
ps -u denis -o pid,pcpu,pmem,etime,cmd | grep java | grep -v grep | \
awk '{printf "PID:%s CPU:%s%% MEM:%s%% ETIME:%s CMD:%s...\n", $1, $2, $3, $4, substr($0, index($0,$5), 80)}' \
|| echo "‚ùå Java –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

echo ""
echo "Node.js (Frontend STAGING):"
ps -u denis -o pid,pcpu,pmem,etime,cmd | grep node | grep -v grep | \
awk '{printf "PID:%s CPU:%s%% MEM:%s%% ETIME:%s CMD:%s...\n", $1, $2, $3, $4, substr($0, index($0,$5), 80)}' \
|| echo "‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω"

# 5. DOCKER
print_header "DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–´"
if command -v docker >/dev/null 2>&1; then
    docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
else
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 6. NGINX
print_header "NGINX"
if systemctl is-active --quiet nginx; then
    echo "‚úÖ Nginx –∞–∫—Ç–∏–≤–µ–Ω"
    sudo nginx -t 2>&1 | grep -q "syntax is ok"
    if [ $? -eq 0 ]; then
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    fi
else
    echo "‚ùå Nginx –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
fi

# 7. MYSQL STAGING
print_header "–ë–ê–ó–ê –î–ê–ù–ù–´–• MYSQL (STAGING)"
if mysql -u denis -p'Himik28@good' -e "SELECT 1;" yarn_store_staging >/dev/null 2>&1; then
    echo "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ yarn_store_staging —É—Å–ø–µ—à–Ω–æ"
    tables=$(mysql -u denis -p'Himik28@good' yarn_store_staging -e "SHOW TABLES;" | tail -n +2 | wc -l)
    echo "üìä –¢–∞–±–ª–∏—Ü: $tables"
    echo "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: $(mysql -u denis -p'Himik28@good' yarn_store_staging -e "SELECT COUNT(*) FROM users;" | tail -1)"
    echo "üßµ –¢–æ–≤–∞—Ä–æ–≤ (yarns): $(mysql -u denis -p'Himik28@good' yarn_store_staging -e "SELECT COUNT(*) FROM yarns;" | tail -1)"
    echo "üõí –ö–æ—Ä–∑–∏–Ω: $(mysql -u denis -p'Himik28@good' yarn_store_staging -e "SELECT COUNT(*) FROM cart_items;" | tail -1)"
    echo "üì¶ –ó–∞–∫–∞–∑–æ–≤: $(mysql -u denis -p'Himik28@good' yarn_store_staging -e "SELECT COUNT(*) FROM orders;" | tail -1)"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ yarn_store_staging"
fi

# 8. API –≠–ù–î–ü–û–ò–ù–¢–´
print_header "API –≠–ù–î–ü–û–ò–ù–¢–´ (STAGING)"
endpoints=(
    "http://localhost:8082/actuator/health:Backend Health Local"
    "http://localhost:3002:Frontend Local"
    "https://staging-qscfgrt657.duckdns.org/actuator/health:Backend Health Nginx"
    "https://staging-qscfgrt657.duckdns.org/v3/api-docs:API Docs"
    "https://staging-qscfgrt657.duckdns.org/swagger-ui/index.html:Swagger UI"
)
for ep in "${endpoints[@]}"; do
    url=$(echo "$ep" | cut -d':' -f1-2)
    name=$(echo "$ep" | cut -d':' -f3-)
    code=$(curl -s -o /dev/null -w "%{http_code}" "$url" --connect-timeout 5)
    if [ "$code" = "200" ]; then
        echo "‚úÖ $name ($url) - OK"
    elif [ "$code" = "000" ]; then
        echo "‚ùå $name ($url) - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        echo "‚ö†Ô∏è $name ($url) - HTTP $code"
    fi
done

# 9. –î–ò–°–ö –∏ –õ–û–ì–ò
print_header "–î–ò–°–ö–û–í–û–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û –ò –õ–û–ì–ò"
df -h / | tail -1 | awk '{print "–ö–æ—Ä–µ–Ω—å: "$3" –∏–∑ "$2" ("$5")"}'
log_dirs=(
    "/home/denis/projects/staging/Bumbac-staging/backend/logs"
    "/var/log/nginx"
    "/var/log/mysql"
)
for dir in "${log_dirs[@]}"; do
    if [ -d "$dir" ]; then
        size=$(du -sh "$dir" | cut -f1)
        echo "üìÅ $dir: $size"
    else
        echo "‚ùå $dir –Ω–µ—Ç"
    fi
done

# 10. –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´
print_header "–°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´"
top -bn1 | grep "Cpu(s)" | awk '{printf "CPU: %.1f%% –∑–∞–≥—Ä—É–∂–µ–Ω\n", $2}'
free -h | awk '/Mem/ {printf "RAM: %s –∏–∑ %s –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n", $3, $2}'
echo "Top –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ CPU:"
ps aux --sort=-%cpu | head -6 | tail -5 | awk '{printf "%-10s %s%% %s\n", $1, $3, $11}'
echo "Top –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –ø–∞–º—è—Ç–∏:"
ps aux --sort=-%mem | head -6 | tail -5 | awk '{printf "%-10s %s%% %s\n", $1, $4, $11}'

# 11. –ü–†–û–ï–ö–¢–ù–´–ï –ü–ê–ü–ö–ò
print_header "–§–ê–ô–õ–û–í–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–û–ï–ö–¢–ê (STAGING)"
project_dirs=(
    "/home/denis/projects/staging/Bumbac-staging/backend"
    "/home/denis/projects/staging/YearnBumbacFront-staging"
)
for dir in "${project_dirs[@]}"; do
    if [ -d "$dir" ]; then
        echo "‚úÖ $dir ($(du -sh "$dir" | cut -f1))"
    else
        echo "‚ùå $dir –Ω–µ—Ç"
    fi
done

# 12. –†–ï–ó–Æ–ú–ï
print_header "–†–ï–ó–Æ–ú–ï –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò (STAGING)"
issues=0
if ! screen -ls | grep -q "backend-staging"; then
    echo "‚ö†Ô∏è Backend screen –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    ((issues++))
fi
if ! screen -ls | grep -q "frontend-staging"; then
    echo "‚ö†Ô∏è Frontend screen –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω"
    ((issues++))
fi
if ! ss -ltnp | grep -q ":8082"; then
    echo "‚ö†Ô∏è Backend API (8082) –Ω–µ —Å–ª—É—à–∞–µ—Ç"
    ((issues++))
fi
if ! ss -ltnp | grep -q ":3002"; then
    echo "‚ö†Ô∏è Frontend (3002) –Ω–µ —Å–ª—É—à–∞–µ—Ç"
    ((issues++))
fi

if [ $issues -eq 0 ]; then
    echo "‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã STAGING —Ä–∞–±–æ—Ç–∞—é—Ç!"
    echo "üåê –°–∞–π—Ç: https://staging-qscfgrt657.duckdns.org/"
    echo "üìö Swagger: https://staging-qscfgrt657.duckdns.org/swagger-ui/index.html"
else
    echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: $issues"
    echo "üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: ./start-staging.sh"
fi

# 13. –°–†–ê–í–ù–ï–ù–ò–ï PROD vs STAGING (–í–°–ï –¢–ê–ë–õ–ò–¶–´)
print_header "–°–†–ê–í–ù–ï–ù–ò–ï PROD vs STAGING"

if mysql -u denis -p'Himik28@good' -e "SELECT 1;" yarn_store >/dev/null 2>&1 && \
   mysql -u denis -p'Himik28@good' -e "SELECT 1;" yarn_store_staging >/dev/null 2>&1; then

    prod_tables=$(mysql -u denis -p'Himik28@good' yarn_store -e "SHOW TABLES;" | tail -n +2)
    staging_tables=$(mysql -u denis -p'Himik28@good' yarn_store_staging -e "SHOW TABLES;" | tail -n +2)

    prod_count=$(echo "$prod_tables" | wc -l)
    staging_count=$(echo "$staging_tables" | wc -l)

    echo "üìä –¢–∞–±–ª–∏—Ü –≤ PROD: $prod_count"
    echo "üìä –¢–∞–±–ª–∏—Ü –≤ STAGING: $staging_count"

    diff_tables=$(comm -3 <(echo "$prod_tables" | sort) <(echo "$staging_tables" | sort))
    if [ -n "$diff_tables" ]; then
        echo "‚ö†Ô∏è –†–∞–∑–ª–∏—á–∏—è –≤ —Å–ø–∏—Å–∫–µ —Ç–∞–±–ª–∏—Ü:"
        echo "$diff_tables"
    else
        echo "‚úÖ –ù–∞–±–æ—Ä —Ç–∞–±–ª–∏—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç"
    fi

    echo ""
    echo "üìã –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:"
    for table in $prod_tables; do
        prod_rows=$(mysql -u denis -p'Himik28@good' yarn_store -e "SELECT COUNT(*) FROM $table;" 2>/dev/null | tail -1)
        staging_rows=$(mysql -u denis -p'Himik28@good' yarn_store_staging -e "SELECT COUNT(*) FROM $table;" 2>/dev/null | tail -1)

        if [ -n "$prod_rows" ] && [ -n "$staging_rows" ]; then
            if [ "$prod_rows" -eq "$staging_rows" ]; then
                echo "‚úÖ $table ‚Üí —Å–æ–≤–ø–∞–¥–∞–µ—Ç ($prod_rows —Å—Ç—Ä–æ–∫)"
            else
                echo "‚ö†Ô∏è $table ‚Üí PROD: $prod_rows | STAGING: $staging_rows"
            fi
        else
            echo "‚ùå $table ‚Üí –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ–¥–Ω–æ–π –∏–∑ –±–∞–∑"
        fi
    done
else
    echo "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ prod –∏–ª–∏ staging –±–∞–∑–µ"
fi
